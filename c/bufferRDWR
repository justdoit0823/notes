下面主要对针对缓冲区进行的一些读写操作做个分析和总结，巩固一下基础。

讨论的方面：
1、 函数原型
2、 缓冲区长度所表现出来的不同状况
3、 返回值的意义

------------------------------------------------------------------

char *strcpy(char *dest, const char *src);

将src指向的字符串复制到dest指向的缓冲区，包含结束字节（'\0'）。如果dest所指向的缓冲区的长度不够容纳src指向的字符串时，可能发生任何事，也肯能被攻击。

char *strncpy(char *dest, const char *src, size_t n);

与strcpy差不多，不过是将src指向的字符串的前n个字节，如果前n个字节不包括结束字节（'\0'）的话，那么复制到dest的字符串同样是没有结束字节的。然而，如果src指向的字符串不足n个字节的话，就补充结束字节（'\0'）到总字节数为n。

两个函数都是返回指向dest缓冲区的指针。

------------------------------------------------------------------

void *memcpy(void *dest, const void *src, size_t n);

从src指向的缓冲区开始，复制n个字节到dest指向的缓冲区。src和dest指向的缓冲区在n个字节内不能有覆盖的交集，不然复制的时候就会出问题。

返回值是指向dest缓冲区的指针。

void *memccpy(void *dest, const void *src, int c, size_t n);

从src指向的缓冲区开始，最多复制n个字节到dest指向的缓冲区。如果在前n个字节里面出现了字符c，那么停止复制。如果src和dest指向的缓冲区有交集的话，结果是未定义的。

返回值是指向dest缓冲区里下一次出现字符c的地址指针或是NULL。

void bcopy(const void *src, void *dest, size_t n);

从src指向的缓冲区复制n个字节到dest指向的缓冲区，不管src和dest指向的缓冲区是否有交集都能复制成功。

void *memmove(void *dest, const void *src, size_t n);

从src指向的缓冲区复制n个字节到dest指向的缓冲区，不管src和dest指向的缓冲区是否有交集都能复制成功。在操作时，会先把src指向的缓冲区中n个字节复制到一个跟src和dest没有任何交集的临时缓冲区，然后再从临时缓冲区复制到dest所指向的缓冲区。

返回值是指向dest所指向缓冲区的指针。

--------------------------------------------------------------------

void *memset(void *s, int c, size_t n);

从s指向的缓冲区开始，填充n个字节的字符c。一般用于缓冲区初始化。

void bzero(void *s, size_t n);

从s指向的缓冲区开始，填充n个字节的字符'\0'。用于缓冲区初始化，不如memset一般普遍。

-------------------------------------------------------------------

int sprintf(char *str, const char *format, ...);

将按照format指定的格式格式化之后的字符串写到str指向的缓冲区中，

返回值是写到缓冲区中的字符数，包括结束符'\0'。

int snprintf(char *str, size_t size, const char *format, ...);

将按照format指定的格式格式化之后的字符串最多写size个字节到str指向的缓冲区中，包含结束符'\0'。

返回值是可以写到缓冲区中的字符数，除去结束符'\0'。如果返回值大于等于size，则指明格式化后的字符串被截断了。

------------------------------------------------------------------

int sscanf(const char *str, const char *format, ...);

从str指向的缓冲区中按照format指定的格式读取相应格式的数据项到相应的变量中。

返回是成功匹配的数据项的个数。EOF指示出已经读到str字符串的结束位置但还没有出现至少一个相匹配的数据项。

在匹配字符串项时，由于长度不好控制，容易出现缓冲区溢出的现象。这个在使用时需注意。
