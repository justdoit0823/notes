Tornado总结

一、Tornado基本介绍

	1.1 Tornado简介

	Tornado是一个用python编写的web框架和异步网络库，最初由FriendFeed开发。通过非阻塞网络io，Tornado可以扩展至数十千打开的连接，使之处理long polling，WebSockets，以及其他一些需要长连接相互通信的应用程序。作为一个轻量级的框架，Tornado比较分散和自由，不像django那么重，组织结构较为成熟。使用上，比较容易上手，源代码的风格也很清晰，读起来也不难。

	1.2 使用平台

	Tornado可以运行在任何类unix平台上，甚至在windows上面。不过，只有Linux（支持epoll）和BSD（支持kqueue）才能提供最好的性能和扩展。在较早的版本（如1.x）里面，还有一个epoll的c扩展模块用来封装对epoll的使用，后来（如2.x）就利用python对其的支持，封装了操作，放在ioloop模块里面。

	1.3 安装

	1）从github安装

		~# git clone https://github.com/tornadoweb/tornado.git -b version
		~# cd tornado
		~# sudo python setup.py build && sudo python setup.py install

	2）从pypi安装

		~# sudo pip install tornado=version

	1.4 文档和帮助

	website: http://www.tornadoweb.org/

	github: https://github.com/tornadoweb/tornado

	mailing list: http://groups.google.com/group/python-tornado

	faq: https://github.com/facebook/tornado/wiki/Frequently-asked-questions

	tc: https://github.com/facebook/tornado/wiki/Threading-and-concurrency

	deploy: https://github.com/facebook/tornado/wiki/Deployment

二、Tornado架构的分析

	虽然Tornado的层级结构不是很明显，但是对网络连接处理流程的层次还是拆分得不错的，可以大致分为一下几个部分。

	网络核心io

		采用单线程，构造单ioloop实例，处理网络连接。当然，也可以prefork多进程使用，部署时用来抵抗高负载。

	网络数据流


       /---------------------\		       /-------------------------------\
       |     c33F      	     |		       |       	c703   	       	       |
       | web client request  |---------------->| tcp connection(http prococol) |
       |	      	     |		       |       	       	       	       |
       \---------------------/		       \-------------------------------/
       		     	     			       	       |
       	       	       	       	       	       	       	       V
       		     	     		       	    /----------------------\
       		     	     			    |  	   cA54	       	   |   	    (register new connection)
       		     	     			    |  	ioloop(epoll)  	   |<---------------------------------------------------------------+
       		     	     			    |  	       	       	   |   	      			   	       	     	      	    |
       		     	     			    \----------------------/   	      	 		   	       	     	      	    |
       		     	     			       	       ^  |    	       	      	 		   	       	     	      	    |
       		     	     		 (register htttpserver)|  |(notify httpserver)	 	 	   	       	     	      	    |
       		     	     			      	       |  V    	       	      	 	 	   	       	     	      	    |
       	       	       	       	       	       	     /-------------------\     	 /-----------------------\     	  /-----------------\ 	    |
       		     	     			     |	     c777      	 |------>|          c666       	 |------> |    c4A0  	    | 	    |
       		     	     			     |  main httpserver	 |     	 |   do socket accept  	 |     	  | new connection  | 	    |
       		     	     			     \-------------------/     	 \-----------------------/     	  \-----------------/ 	    |
       		     	     			       	^      	       	       	       	      	     	   	       	  |    	      	    |
       		     	     			      	|      	       	       	       	      	     	   	       	  V    	      	    |
       		     	     			      	|      	       	       	       	      	     	   	  /----------------\  	    |
       	   	     	     			      	|      	       	       	       	      	     	   	  |    c854    	   |--------+
       	       	       	       	       	       	       	|      	       	       	       	       	       	       	  |   iostream 	   |
       	       	       	       	       	       	       	|(settings)    	       	       	      	     	       	  |    	       	   |--------+
       	       	       	       	       	       	       	|      	       	       	       	      	     	   	  \----------------/	    |
       	   	     	     			       	|      		       		      	     	    	   (read) |   ^	  	    |
       	   	     	     	     (register handlers)|      	       	       	       	       	       	       	       	  V   | (write)	    |
       	   	     	     			      	|      	       	       	      /-------------------\ 	 /------------------\	    |
       	       	       	       	       	       	       	|      	       	       	      |	     c365      	  |    	 |     c777    	    |  	    |
       	   	     	     			      	|      	       	       	      |parse http protocol|<-----|  HttpConnection  |	    |
       	   	     	     			      	|      	       	       	      \-------------------/   	 \------------------/  	    |
       	   	     	     			       	|      	       	       	       	       	  |    	      	      	       	 ^     	    |
       	   	     	     			/------------\ 	       	       	       	       	  V   	      	       	       	 |     	    |
       	   	     	     			|    c831    | 	    /-------------\    	   /--------------\    	       	       	 |     	    |
       	       	       	       	       	       	| initialize | 	    |  	c621   	  |    	   |   c427    	  |    	       	       	 |     	    |
       	   	     	     		       	|      	     | 	    | parse body  |<-------| parse header |    	       	       	 |     	    |
       	   	     	     			\------------/ 	    \-------------/  	   \--------------/    	       	       	 |     	    |
       	   	     	     			   	^      	       	   |   	     	       	  ^    	       	       	       	 |     	    |
       	       	       	       	       	       	       	|      	       	   |   	       	       	  |    	       	       	       	 |     	    |
       	       	       	       	       	       	       	|      	       	   |   	       	       	  |    	      	      	       	 |     	    |
							|      	    	   V   	       	       	  V    	       	       	       	 |     	    |
       	       	       	       	       	  	/-------------\	    /--------------\   	   /--------------\    	       	       	 |     	    |
       	       	       	       	       	       	|    c678     |-----|     c345 	   |<------|   c520    	  |----------------------+     	    |
       	       	       	       	       	       	| Application |	    | app callback |   	   | HttpRequest  |<-------------------------+ 	    |
       /---------------------\ 	       	       	\-------------/	    \--------------/   	   \--------------/    	       	       	     | 	    |
       |    c33F       	     | 	       	       	       	       	       	   |   	       	       	       	       	       	       	     | 	    |
       | web client response |<--------------------------------------------+---------------------------------------------------------+------+
       |       	       	     | 	       	       	       	       	       	   |   		      	      	    	      		     |
       \---------------------/ 	       	       	       	       	       	   V   	       	       	       	       	       	       	     |
       	       	       	       	       	       	       	       	    /-------------\    	/-----------------\    /------------\  	  /-------\
       	       	       	       	       	     		       	    |  	c372   	  |    	|     c631        |    |    c880    |  	  | c578  |
       				   			       	    |  route map  |---->|  RequestHandler |--->| do method  |---->| render|
       				   			       	    \-------------/   	\-----------------/    \------------/  	  \-------/


	主要模块

		web.py 包含两个很重要的类Application和RequestHandler,其中Application主要负责应用的初始化以及建立URL路由到具体处理类(RequestHandler)的映射，而RequestHandler则主要是针对特定请求的具体逻辑处理，包括GET和POST(主要，其它的同样支持)请求。

		httpserver.py 包含三个重要的类HTTPServer,HTTPConnection以及HTTPRequest。其中HTTPServer主要是创建监听套接字(非阻塞)，指定连接积压值，以及注册处理网络连接事件的回调函数。HTTPConnection主要是作为一个中间对象来处理连接，包括解析请求头，请求实体，根据解析参数构造请求HTTPRequest，执行Application回调函数。HTTPRequest则主要是构造请求参数，作为一个请求数据对象传递到RequestHandler当中，供具体逻辑处理者使用。

		ioloop.py 包含一个非常重要的类IOLoop,其作为整个网络io的核心部分，主要是在epoll(linux平台)和kqueue(bsd平台)的基础上，进行了一些封装，便于使用。包括io事件的回调函数注册和注销,io主循环及其中的事件回调。

		iostream 包含一个很重要的类IOStream,设定套接字参数(非阻塞)以及一些维护读写需要的参数，作为网络数据流的管道，通过两个buffer来进行进出网络数据的读写操作。

		options 一个作为内部使用的配置模块，用来配置应用中需要的一些参数，既可以通过命令行指定参数，也可以通过配置文件来指定参数，使用起来比较方便。

		database.py 简单说，就是一个针对利用python访问mysql的底层库的封装，但又没有封装成ORM那样，只是使操作更简单一些。

		template.py 作为一个简单的模板系统，还是够用的。而且使用起来比较简单，语法不是太多，大多都类似。主要就是表达语句，控制流程语句这些，还有一些继承语句什么的。


三、web开发使用介绍

	1. 初始化Application,指定static_path,template_path,开启gzip压缩,debug模式,启用跨域xsrf_cookie,设定cookie_secret,建立URL路由映射。

	   一个典型的初始化如下所示:
	   settings = dict(
            template_path=your-template-path,
            static_path=your-static-path,
            cookie_secret=("sdjkfdSKFJ8K07JDWEOSLSGaYdkL5gemGeJKFuYh2y5g"
			   "d8tu6N0k$;Kfe"),
            login_url="/user/action/login",
            xsrf_cookies=True,
            ui_modules=module.modules,
            autoescape=None,
            gzip=True,
            debug=True,
            handlers=[
		(r"/", IndexHandler),
            	(r"/login", LoginHandler),
            	(r"/logout", LogoutHandler),
            	(r"/about", AboutHandler),
	    ]
	   )
          tornado.web.Application.__init__(self, **settings)

	2. 初始化参数介绍

	   2.1 static_path和template_path

	   static_path主要是用来指定静态文件的路径，好让server启动之后可以伺服静态文件，比如css文件，js文件，图片文件等等。而template_path主要是指定存放模板html文件的路径，这样在逻辑处理中调用渲染接口的时候用相对路径就可以了。

	   2.2 URL路由映射

	   URL路由，也就是Application参数中的handlers，用于关联URL路径到具体处理Handler，在执行请求处理时执行。handlers里面的元素可以是一个包含2或者3个子元素的元组，其中第一个是URL的正则表达式，第二个是关联的处理Handler，第三个为额外的字典参数。

	   2.3 跨域xsrf_cookie

	   这是Tornado内部防范跨越请求的办法，通过开启这个选项，在进行表单提交的时候会检查xsrf_cookie，如果不存在或者不对的话，请求会被拒绝。同时，在html模板文件中，我们可以通过xsrf_form_html接口来生成一个隐藏的input元素并附上特定的value。

	   2.4 cookie_secret

	   通过指定一个随机的cookie_secret序列，可以在设置cookie时使用secret cookie，免于明文存储。

	   2.4 gzip

	   开启这个选项之后，请求的响应中会启用gzip压缩，减少传输量。

	   2.5 debug

	   在debug模式下，server不会缓存模板文件，同时，如果py文件有改动的话，server会自动重启(autoload模块)。这种情况下，比较适合开发时进行调试，不用每次改动后都去手动重启一遍server。

	3. 初始化httpserver

	   将已经初始化的application作为参数传入来初始化httpserver,指定ip地址(也可以使用默认的)和端口(特定端口需要管理员权限)，这样一个具有监听功能的server就开启了。在此需要注意的是，如果想prefork多个进程的话，需要关闭debug模式。

	4. 开启网络io主循环

	   通过IOLoop的start接口，开启io住循环。至此，一个可用的httpserver就开启了。

	5. 编写自己的RequestHandler

	   根据特定的URL，我们可以编写自己的请求处理逻辑，包括GET和POST请求(主要情况，其它类型的请求也支持)。
